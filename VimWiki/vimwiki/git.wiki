= git =

== Git in the working group ==
 * [http://book.git-scm.com/3_distributed_workflows.html Git Community Book Distributed Workflows]
 * create repositories as follows and place them in {{{/home/xxx/}}}
{{{
    $ git clone --bare myrepo/.git /home/xxx/myrepo.git
}}}
 * a hook (do not forget chmod +x for the hook) is nedded in every repository at {{{.git/hooks/post-receive}}}
{{{
    #!/bin/sh
    #
    # An example hook script for the "post-receive" event.
    #
    # The "post-receive" script is run after receive-pack has accepted a pack
    # and the repository has been updated.  It is passed arguments in through
    # stdin in the form
    #  <oldrev> <newrev> <refname>
    # For example:
    #  aa453216d1b3e49e7f6f98441fa56946ddcd6a20 68f7abf4e6f922807889f52bc043ecd31b79f814 refs/heads/master
    #
    # see contrib/hooks/ for an sample, or uncomment the next line and
    # rename the file to "post-receive".
    
    #. /usr/share/doc/git-core/contrib/hooks/post-receive-email

    MYREPO='/home/xxx/myrepo.git/'

    echo "adapting user rights for ${MYREPO}" 

    find ${MYREPO} -type f -exec chmod 660 {} \;
    find ${MYREPO} -type d -exec chmod 770 {} \; 
    chmod 770 ${MYREPO}hooks/post-receive
}}}

== Move a file from one repository to another ==
Assume you want to transfer the history of filename.conf from one source repository to another receiving repository. I think the strategy you want to follow is:
 # In the source repository, create a branch of commits which are re-written to contain only filename.conf.
 # Fetch the commits into the receiving repository.
 # Merge the independent line of commits into a normal branch in the receiving repository.
Definitely make backups of your repositories before you do any of this!
In the source repository:
{{{
    git checkout -b filtered-commits
    git filter-branch -f --prune-empty --tree-filter 'find . -not -name filename.conf -exec rm {} \;' filtered-commits
}}}
If you also need to move the path that filename.conf is in within the repository, you'll probably need to use the {{{--subdirectory-filter}}} option on {{{git filter-branch}}}.
Then, in the receiving repository:
{{{
    git remote add source path/to/source/repo
    git fetch source filtered-commits
    GIT_INDEX_FILE=.git/tmp-index git read-tree FETCH_HEAD
    GIT_INDEX_FILE=.git/tmp-index git checkout-index -a -u
    git update-index --add -- filename.conf
    cp .git/FETCH_HEAD .git/MERGE_HEAD
    git commit
}}}
 * From: [http://superuser.com/questions/164362/git-keep-changelog-for-file-when-moving-to-a-different-repository [.} superuser: git: Keep changelog for file when moving to a different repository]

== Create new repository ==
 mkdir [name of new repository]
 cd [name of new repository]
 git init

== Adding and committing ==

=== Put file under version control ===
 git add [filename]

=== Committing ===
 git commit

=== Remove all files not under version control ===
 git clean

=== Revert local changes to last committed version ===
 git reset --hard HEAD

== Working with branches ==

=== Show existing branches and which branch is currently active ===
 git branch

=== Create new branch from master branch ===
 git branch [name of new branch]

=== Switch to another branch ===
 git checkout [name of branch]

=== Delete branch ===
 git branch -d [name of branch]

== Merging two different branches ==
 git checkout [target branch]

 git merge [source branch]

=== If a merge conflict occurs: ===
If a merge conflict occurs git prints someting like
 CONFLICT (content): Merge conflict in [file with merge conflict]
Resolve conflict by manually editing the lines in [file with merge
conflict] between "<<<<<<<" and ">>>>>>>". Source and target code are
seperated by "=======".
 git add [file with manually resolved merge conflict]

 git commit

== Make a list of files/directories that should not be versioned ==
 cd [repository main directory]
 touch .gitignore
edit .gitignore. Example:
{{{
 *.[oa] # object files/libraries
 *.mod # module files
 *~ # backup files
 doc/api/html/* # path for doxygen api documentation in html
 doc/api/latex/* # path for doxygen api documentation in latex
}}}

 * [http://git-scm.com/ http://git-scm.com/]

== Installation on SUSE 10.3 or Debian GNU/Linux 5.0.0 Lenny ==
 * [http://git-scm.com/download Download latest git version] to `/usr/local/linux/GIT`
{{{
cd /usr/local/linux/GIT
tar xvjf git-*.tar.bz2
cd git-*
./configure --prefix=/usr/local/linux/GIT/ && make && make install
}}}

== Configure a users account for git usage ==
 * simply add ''/usr/local/linux/GIT/bin/'' to your path
 * for bash users:
{{{
echo 'export PATH=${PATH}:/usr/local/linux/GIT/bin/' >> ~/.bashrc
}}}
 * create a ~/.gitconfig by ([http://book.git-scm.com/2_setup_and_initialization.html more information], [http://www.kernel.org/pub/software/scm/git/docs/git-config.html man git config]):
{{{
git config --global user.name "Your Name"
git config --global user.email "yourname@keychem.de"
}}}

== Initializing a New Repository ==
{{{
cd /path/to/your/project
# create your initial files
git init
git add .
# check your new repository to prefend submitting rubbish by:
git status
# inital commit
git commit
}}}

== some usfull commands ==
 * You can see what is about to be committed using git diff with the --cached option (Without --cached, git diff will show you any changes that you've made but not yet added to the index): {{{git diff --cached}}}
 * You can also get a brief summary of the situation with git status: {{{git status}}}

 * Please read the following chapters  in the Git Book:
    * [http://book.git-scm.com/3_basic_branching_and_merging.html Basic Branching and Merging]
 * Show the log of a repository:
    * [http://book.git-scm.com/3_reviewing_history_-_git_log.html Reviewing History - Git Log]
{{{
git log
git log --pretty=format:'%h : %s' --date-order --graph
}}}

== GIT and Windows ==
 * [http://code.google.com/p/msysgit/ msysgit Git on Windows]

== GIT and vim ==
 * [http://www.vim.org/scripts/script.php?script_id=90 vcscommand.vim : CVS/SVN/SVK/git integration plugin]
 * [http://vim.wikia.com/wiki/Display_shell_commands'_output_on_Vim_window Display shell commands' output on Vim window]
 * [http://www.vim.org/scripts/script.php?script_id=1846 gitdiff.vim : show git diff in a split window]

== Literature ==
 * [http://de.wikipedia.org/wiki/Git Wikipedia: GIT]
 * [http://git-scm.com/ http://git-scm.com/]
 * [http://git-scm.com/documentation GIT-Documentation]
 * [http://book.git-scm.com/ The Git Community Book]
 * [http://zrusin.blogspot.com/2007/09/git-cheat-sheet.html Git cheat sheet]
 * [https://37s.backpackit.com/pub/1465067 quick start guide]
 * [http://git.or.cz/gitwiki/GitDocumentation Gitwiki: Git Documentation]
 * [http://www.kernel.org/pub/software/scm/git/docs/everyday.html Everyday GIT With 20 Commands Or So]
 * [http://git-scm.com/course/svn.html Git - SVN Crash Course]
 * [http://www.spheredev.org/wiki/Git_for_the_lazy Git for the lazy]
 * [http://hoth.entp.com/output/git_for_designers.html git for designers]
 * [http://eagain.net/articles/git-for-computer-scientists/ Git for Computer Scientists]
 * [http://www.kernel.org/pub/software/scm/git/docs/user-manual.html Git User's Manual]
 * [http://github.com/guides/home GitHub Guides]
 * [http://git.or.cz/gitwiki/InterfacesFrontendsAndTools Interfaces Frontends And Tools]
 * [http://git.or.cz/gitwiki/GitFaq GitFaq]
 * [http://git.or.cz/gitwiki/FrontPage FrontPage]
 * [http://cheat.errtheblog.com/s/git/ cheat git]
 * [http://git.or.cz/course/svn.html Git - SVN Crash Course]
 * [http://www-cs-students.stanford.edu/~blynn/gitmagic/ Git Magic]
 * [http://www.kernel.org/pub/software/scm/git/docs/howto-index.html GIT Howto Index]
 * [http://osteele.com/archives/2008/05/my-git-workflow Oliver Steele - My Git Workflow]
 * [http://perl.plover.com/yak/git/ Linus Torvalds' Greatest Invention - why git is awesome]
 * [http://www.newartisans.com/2008/04/git-from-the-bottom-up.html Git from the bottom up]

== Randon Information Snippets ==
 * [http://live.gnome.org/GitMigration Gnome Migration process from subversion to git]
 * [http://torvalds-family.blogspot.com/2009/06/happiness-is-warm-scm.html Thorvalds comment on using git]
